[{"D:\\learnReact\\project2\\client\\src\\index.js":"1","D:\\learnReact\\project2\\client\\src\\App.js":"2","D:\\learnReact\\project2\\client\\src\\components\\Register.js":"3","D:\\learnReact\\project2\\client\\src\\services\\auth.service.js":"4","D:\\learnReact\\project2\\client\\src\\components\\Login.js":"5","D:\\learnReact\\project2\\client\\src\\components\\Profile.js":"6","D:\\learnReact\\project2\\client\\src\\services\\getter.service.js":"7","D:\\learnReact\\project2\\client\\src\\components\\Friends.js":"8","D:\\learnReact\\project2\\client\\src\\components\\Messenger.js":"9"},{"size":336,"mtime":1608739362698,"results":"10","hashOfConfig":"11"},{"size":2316,"mtime":1608824647241,"results":"12","hashOfConfig":"11"},{"size":5692,"mtime":1608758802964,"results":"13","hashOfConfig":"11"},{"size":1330,"mtime":1608759342045,"results":"14","hashOfConfig":"11"},{"size":4114,"mtime":1608759107364,"results":"15","hashOfConfig":"11"},{"size":921,"mtime":1608813769062,"results":"16","hashOfConfig":"11"},{"size":2603,"mtime":1608851954203,"results":"17","hashOfConfig":"11"},{"size":2405,"mtime":1608847144802,"results":"18","hashOfConfig":"11"},{"size":3606,"mtime":1608852872410,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"15bcchs",{"filePath":"23","messages":"24","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28","usedDeprecatedRules":"22"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"22"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\learnReact\\project2\\client\\src\\index.js",[],["42","43"],"D:\\learnReact\\project2\\client\\src\\App.js",["44"],"import 'materialize-css/dist/css/materialize.min.css'\nimport './App.css';\nimport Register from \"./components/Register\";\nimport {Redirect, Switch, Route} from 'react-router-dom'\nimport React, {useEffect, useState} from \"react\";\nimport AuthService from './services/auth.service'\nimport Login from \"./components/Login\";\nimport Profile from \"./components/Profile\";\nimport Friends from \"./components/Friends\";\nimport Messenger from \"./components/Messenger\";\n\n\nfunction App() {\n    const [logged, setLogged] = useState(false)\n    useEffect(() => {\n        const user = AuthService.getCurrentUser();\n        setLogged(user)\n    }, [])\n    let nav;\n    if (logged){\n        nav = (<div>\n                <li><a className='blue-text text-darken-4' href=\"/profile\">Profile</a></li>\n                <li><a className='blue-text text-darken-4' href=\"/messenger\">Messenger</a></li>\n                <li><a className='blue-text text-darken-4' href=\"/friends\">Friends</a></li>\n                <li><a onClick={AuthService.logout} className='blue-text text-darken-4' href=\"/logout\">Logout</a></li>\n            </div>)\n    } else nav = (<div>\n            <li><a className='blue-text text-darken-4' href=\"/log\">Login</a></li>\n            <li><a className='blue-text text-darken-4' href=\"/reg\">Register</a></li>\n        </div>)\n    let routes\n    if (logged) {\n        routes = (\n            <Switch>\n                <Route exact path='/profile'><Profile/></Route>\n                <Route exact path='/messenger'><div><p><Messenger/></p></div></Route>\n                <Route exact path='/friends'><div><p><Friends/></p></div></Route>\n                <Route exact path='/logout'><Login/></Route>\n            </Switch>\n        )\n    } else routes = (\n        <Switch>\n            <Route exact path='/reg'><Register/></Route>\n            <Route exact path='/logout'><Login/></Route>\n            <Route exact path='/log'><Login/></Route>\n        </Switch>\n    )\n  return (\n\n    <div className=\"App\">\n        <nav>\n            <div className=\"nav-wrapper grey lighten-5\">\n                <a href=\"#!\" className=\"left brand-logo blue-text text-darken-4\">G_Kontakte</a>\n                <ul className=\"right\">\n                    {nav}\n                </ul>\n            </div>\n        </nav>\n        {routes}\n    </div>\n  );\n}\n\nexport default App;\n","D:\\learnReact\\project2\\client\\src\\components\\Register.js",["45"],"import React, { useState, useRef } from \"react\";\r\nimport Form from \"react-validation/build/form\";\r\nimport Input from \"react-validation/build/input\";\r\nimport CheckButton from \"react-validation/build/button\";\r\nimport { isEmail } from \"validator\";\r\n\r\nimport AuthService from \"../services/auth.service\";\r\n\r\nconst required = (value) => {\r\n    if (!value) {\r\n        return (\r\n            <div className=\"alert alert-danger\" role=\"alert\">\r\n                This field is required!\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nconst Register = (props) => {\r\n    const form = useRef();\r\n    const checkBtn = useRef();\r\n\r\n    const [name, setName] = useState(\"\");\r\n    const [surname, setSurname] = useState(\"\");\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [successful, setSuccessful] = useState(false);\r\n    const [message, setMessage] = useState(\"\");\r\n\r\n    const onChangeName = (e) => {\r\n        setName(e.target.value);\r\n    };\r\n\r\n    const onChangeSurname = (e) => {\r\n        setSurname(e.target.value)\r\n    }\r\n    const onChangeEmail = (e) => {\r\n        setEmail(e.target.value);\r\n    };\r\n\r\n    const onChangePassword = (e) => {\r\n        setPassword(e.target.value);\r\n    };\r\n\r\n\r\n    const handleRegister = async (e) => {\r\n        e.preventDefault();\r\n\r\n        setMessage(\"\");\r\n        setSuccessful(false);\r\n\r\n        //form.current.validateAll();\r\n\r\n        if (checkBtn.current.context._errors.length === 0) {\r\n            AuthService.register(name, surname, email, password).then(\r\n                (res) => {\r\n                    setMessage(res.message);\r\n                    setSuccessful(true);\r\n                    window.location.replace('/log')\r\n                },\r\n                (error) => {\r\n                    const resMessage =\r\n                        (error.response &&\r\n                            error.response.data &&\r\n                            error.response.data.message) ||\r\n                        error.message ||\r\n                        error.toString();\r\n                    setMessage(resMessage);\r\n                    setSuccessful(false);\r\n                }\r\n            );\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"col-md-12\">\r\n            <div className=\"card card-container\">\r\n                <Form onSubmit={handleRegister} ref={form}>\r\n                    {!successful && (\r\n                        <div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"name\">Name</label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"name\"\r\n                                    value={name}\r\n                                    onChange={onChangeName}\r\n                                    validations={[required]}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"surname\">Surname</label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"surname\"\r\n                                    value={surname}\r\n                                    onChange={onChangeSurname}\r\n                                    validations={[required]}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"email\">Email</label>\r\n                                <Input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    name=\"email\"\r\n                                    value={email}\r\n                                    onChange={onChangeEmail}\r\n                                    validations={[required]}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <label htmlFor=\"password\">Password</label>\r\n                                <Input\r\n                                    type=\"password\"\r\n                                    className=\"form-control\"\r\n                                    name=\"password\"\r\n                                    value={password}\r\n                                    onChange={onChangePassword}\r\n                                    validations={[required]}\r\n                                />\r\n                            </div>\r\n                            <div className=\"form-group\">\r\n                                <button className=\"btn btn-primary btn-block\">Sign Up</button>\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n\r\n                    {message && (\r\n                        <div className=\"form-group\">\r\n                            <div\r\n                                className={\r\n                                    successful ? \"alert alert-success\" : \"alert alert-danger\"\r\n                                }\r\n                                role=\"alert\"\r\n                            >\r\n                                {message}\r\n                            </div>\r\n                        </div>\r\n                    )}\r\n                    <CheckButton style={{ display: \"none\" }} ref={checkBtn} />\r\n                </Form>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Register;\r\n","D:\\learnReact\\project2\\client\\src\\services\\auth.service.js",["46","47"],"import axios from \"axios\";\r\n\r\nconst API_URL = \"http://localhost:8080/\";\r\n\r\nconst register = async (name, surname, email, password) => {\r\n    try {\r\n        const response = await fetch(API_URL+'reg',{\r\n            method: \"POST\",\r\n            mode: 'cors',\r\n            headers: {\r\n                'Content-Type' : 'application/json;charset=utf-8',\r\n            },\r\n            body: JSON.stringify({ name: name, surname: surname, email : email, password : password })\r\n        })\r\n        return response.json()\r\n    }\r\n    catch (e) {\r\n        alert(e)\r\n    }\r\n};\r\n\r\nconst login = async (email, password ) => {\r\n    return await fetch(API_URL + 'login', {\r\n        method: 'POST',\r\n        mode: 'cors',\r\n        headers: {\r\n            'Content-Type' : 'application/json;charset=utf-8',\r\n        },\r\n        body: JSON.stringify({email:email, password: password})\r\n    }).then(async (response) => {\r\n        const data = await response.json();\r\n        if (data.token)  {\r\n            localStorage.setItem(\"user\", JSON.stringify(data));\r\n        }\r\n        return data\r\n    })\r\n};\r\n\r\nconst logout = () => {\r\n    localStorage.removeItem(\"user\");\r\n};\r\n\r\nconst getCurrentUser = () => {\r\n    return JSON.parse(localStorage.getItem(\"user\"));\r\n};\r\n\r\nexport default {\r\n    register,\r\n    login,\r\n    logout,\r\n    getCurrentUser,\r\n};\r\n","D:\\learnReact\\project2\\client\\src\\components\\Login.js",[],"D:\\learnReact\\project2\\client\\src\\components\\Profile.js",[],"D:\\learnReact\\project2\\client\\src\\services\\getter.service.js",["48","49"],"D:\\learnReact\\project2\\client\\src\\components\\Friends.js",[],"D:\\learnReact\\project2\\client\\src\\components\\Messenger.js",["50","51"],{"ruleId":"52","replacedBy":"53"},{"ruleId":"54","replacedBy":"55"},{"ruleId":"56","severity":1,"message":"57","line":4,"column":9,"nodeType":"58","messageId":"59","endLine":4,"endColumn":17},{"ruleId":"56","severity":1,"message":"60","line":5,"column":10,"nodeType":"58","messageId":"59","endLine":5,"endColumn":17},{"ruleId":"56","severity":1,"message":"61","line":1,"column":8,"nodeType":"58","messageId":"59","endLine":1,"endColumn":13},{"ruleId":"62","severity":1,"message":"63","line":47,"column":1,"nodeType":"64","endLine":52,"endColumn":3},{"ruleId":"56","severity":1,"message":"65","line":75,"column":8,"nodeType":"58","messageId":"59","endLine":75,"endColumn":18},{"ruleId":"62","severity":1,"message":"63","line":86,"column":1,"nodeType":"64","endLine":93,"endColumn":2},{"ruleId":"56","severity":1,"message":"66","line":3,"column":8,"nodeType":"58","messageId":"59","endLine":3,"endColumn":19},{"ruleId":"56","severity":1,"message":"67","line":6,"column":21,"nodeType":"58","messageId":"59","endLine":6,"endColumn":28},"no-native-reassign",["68"],"no-negated-in-lhs",["69"],"no-unused-vars","'Redirect' is defined but never used.","Identifier","unusedVar","'isEmail' is defined but never used.","'axios' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","'addMessage' is assigned a value but never used.","'AuthService' is defined but never used.","'setTime' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]